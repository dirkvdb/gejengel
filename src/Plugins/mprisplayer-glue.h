/* Generated by dbus-binding-tool; do not edit! */


#ifndef __dbus_glib_marshal_mprisPlayer_MARSHAL_H__
#define __dbus_glib_marshal_mprisPlayer_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_char (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */


/* BOOLEAN:BOOLEAN,POINTER (/tmp/dbus-binding-tool-c-marshallers.IUN9UU:1) */
extern void dbus_glib_marshal_mprisPlayer_BOOLEAN__BOOLEAN_POINTER (GClosure     *closure,
                                                                    GValue       *return_value,
                                                                    guint         n_param_values,
                                                                    const GValue *param_values,
                                                                    gpointer      invocation_hint,
                                                                    gpointer      marshal_data);
void
dbus_glib_marshal_mprisPlayer_BOOLEAN__BOOLEAN_POINTER (GClosure     *closure,
                                                        GValue       *return_value G_GNUC_UNUSED,
                                                        guint         n_param_values,
                                                        const GValue *param_values,
                                                        gpointer      invocation_hint G_GNUC_UNUSED,
                                                        gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__BOOLEAN_POINTER) (gpointer     data1,
                                                             gboolean     arg_1,
                                                             gpointer     arg_2,
                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__BOOLEAN_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != nullptr);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__BOOLEAN_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_boolean (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER (/tmp/dbus-binding-tool-c-marshallers.IUN9UU:2) */
extern void dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER (GClosure     *closure,
                                                            GValue       *return_value,
                                                            guint         n_param_values,
                                                            const GValue *param_values,
                                                            gpointer      invocation_hint,
                                                            gpointer      marshal_data);
void
dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER (GClosure     *closure,
                                                GValue       *return_value G_GNUC_UNUSED,
                                                guint         n_param_values,
                                                const GValue *param_values,
                                                gpointer      invocation_hint G_GNUC_UNUSED,
                                                gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER) (gpointer     data1,
                                                     gpointer     arg_1,
                                                     gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != nullptr);
  g_return_if_fail (n_param_values == 2);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:INT,POINTER (/tmp/dbus-binding-tool-c-marshallers.IUN9UU:3) */
extern void dbus_glib_marshal_mprisPlayer_BOOLEAN__INT_POINTER (GClosure     *closure,
                                                                GValue       *return_value,
                                                                guint         n_param_values,
                                                                const GValue *param_values,
                                                                gpointer      invocation_hint,
                                                                gpointer      marshal_data);
void
dbus_glib_marshal_mprisPlayer_BOOLEAN__INT_POINTER (GClosure     *closure,
                                                    GValue       *return_value G_GNUC_UNUSED,
                                                    guint         n_param_values,
                                                    const GValue *param_values,
                                                    gpointer      invocation_hint G_GNUC_UNUSED,
                                                    gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__INT_POINTER) (gpointer     data1,
                                                         gint         arg_1,
                                                         gpointer     arg_2,
                                                         gpointer     data2);
  register GMarshalFunc_BOOLEAN__INT_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != nullptr);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__INT_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_int (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER,POINTER (/tmp/dbus-binding-tool-c-marshallers.IUN9UU:4) */
extern void dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                                    GValue       *return_value,
                                                                    guint         n_param_values,
                                                                    const GValue *param_values,
                                                                    gpointer      invocation_hint,
                                                                    gpointer      marshal_data);
void
dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                        GValue       *return_value G_GNUC_UNUSED,
                                                        guint         n_param_values,
                                                        const GValue *param_values,
                                                        gpointer      invocation_hint G_GNUC_UNUSED,
                                                        gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER_POINTER) (gpointer     data1,
                                                             gpointer     arg_1,
                                                             gpointer     arg_2,
                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != nullptr);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

G_END_DECLS

#endif /* __dbus_glib_marshal_mprisPlayer_MARSHAL_H__ */

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_mprisPlayer_methods[] = {
  { (GCallback) mprisPlayer_next, dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER, 0 },
  { (GCallback) mprisPlayer_prev, dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER, 36 },
  { (GCallback) mprisPlayer_pause, dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER, 72 },
  { (GCallback) mprisPlayer_stop, dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER, 109 },
  { (GCallback) mprisPlayer_play, dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER, 145 },
  { (GCallback) mprisPlayer_get_caps, dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER_POINTER, 181 },
  { (GCallback) mprisPlayer_volume_set, dbus_glib_marshal_mprisPlayer_BOOLEAN__INT_POINTER, 233 },
  { (GCallback) mprisPlayer_volume_get, dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER_POINTER, 283 },
  { (GCallback) mprisPlayer_position_set, dbus_glib_marshal_mprisPlayer_BOOLEAN__INT_POINTER, 337 },
  { (GCallback) mprisPlayer_position_get, dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER_POINTER, 389 },
  { (GCallback) mprisPlayer_repeat, dbus_glib_marshal_mprisPlayer_BOOLEAN__BOOLEAN_POINTER, 445 },
  { (GCallback) mprisPlayer_get_metadata, dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER_POINTER, 492 },
  { (GCallback) mprisPlayer_get_status, dbus_glib_marshal_mprisPlayer_BOOLEAN__POINTER_POINTER, 552 },
};

const DBusGObjectInfo dbus_glib_mprisPlayer_object_info = {
  0,
  dbus_glib_mprisPlayer_methods,
  13,
"org.freedesktop.MediaPlayer\0Next\0S\0\0org.freedesktop.MediaPlayer\0Prev\0S\0\0org.freedesktop.MediaPlayer\0Pause\0S\0\0org.freedesktop.MediaPlayer\0Stop\0S\0\0org.freedesktop.MediaPlayer\0Play\0S\0\0org.freedesktop.MediaPlayer\0GetCaps\0S\0arg0\0O\0F\0N\0i\0\0org.freedesktop.MediaPlayer\0VolumeSet\0S\0arg0\0I\0i\0\0org.freedesktop.MediaPlayer\0VolumeGet\0S\0arg0\0O\0F\0N\0i\0\0org.freedesktop.MediaPlayer\0PositionSet\0S\0arg0\0I\0i\0\0org.freedesktop.MediaPlayer\0PositionGet\0S\0arg0\0O\0F\0N\0i\0\0org.freedesktop.MediaPlayer\0Repeat\0S\0arg0\0I\0b\0\0org.freedesktop.MediaPlayer\0GetMetadata\0S\0arg0\0O\0F\0N\0a{sv}\0\0org.freedesktop.MediaPlayer\0GetStatus\0S\0arg0\0O\0F\0N\0(iiii)\0\0\0",
"org.freedesktop.MediaPlayer\0TrackChange\0org.freedesktop.MediaPlayer\0StatusChange\0org.freedesktop.MediaPlayer\0CapsChange\0\0",
"\0"
};

